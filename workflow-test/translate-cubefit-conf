#!/usr/bin/env python
#
# Translate cubefit config files for local use.
# (Make 'filenames' attribute into the local filenames.)

from __future__ import print_function

import glob
import json
import os

PROCESSING_DIR = '/project/projectdirs/snfactry/processing'
TAG = '0203-CABALLO'
ORIG_DIR = os.path.join(PROCESSING_DIR, TAG, 'cubefit-config-orig')
TARGET_DIR = os.path.join(PROCESSING_DIR, TAG, 'cubefit-config')
CC_PREFIX = '/sps/snovae/SRBregister/Prod/02-03/'


def raw_cubefit_config_filename(dirname, band, tag):
    """Get filename of exactly one raw cubefit config file in the
    given directory and in the given band.

    This is more than just a string format because the SN name in the file
    name has a different format than the input name. This could be simplified
    to a string formatting operation with a lookup between names. However,
    if we were building the pipeline for real, we wouldn't have these sort
    of name mis-matches.
    """

    pattern = "{}/SNF-{}_{}b-*_config.json".format(dirname, tag, band)
    fnames = glob.glob(pattern)
    
    if len(fnames) == 0:
        return None
    elif len(fnames) == 1:
        return fnames[0]
    else:
        raise Exception("Found multiple config file matching {}"
                        .format(pattern))


for name in os.listdir(ORIG_DIR):

    # ensure that target directory for config files exists
    dirname = os.path.join(TARGET_DIR, name)
    if not os.path.exists(dirname):
        os.mkdir(dirname)

    for band in ['B', 'R']:
        dirname = os.path.join(ORIG_DIR, name)
        fname = raw_cubefit_config_filename(dirname, band, TAG)
        if fname is None:
            continue

        # read it
        with open(fname) as f:
            contents = json.load(f)
            
        # The CC filenames are in the 'filepaths' attribute, but we
        # want to put the local filenames in to the 'filenames' attribute.
        # (this is the attribute that cubefit reads)
        # We leave 'filepaths' alone and just ignore it.
        contents['filenames'] = [p.replace(CC_PREFIX, '')
                                 for p in contents['filepaths']]
        
        # write config file to new location.
        outfname = os.path.join(TARGET_DIR, name,
                                '{}_{}.json'.format(name, band))
        print("writing", outfname)
        with open(outfname, 'w') as f:
            json.dump(contents, f, indent=True)
